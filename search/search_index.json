{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"API Restfull com Postgres","text":"<p>API com endpoints para cadastro de um novo usu\u00e1rio, login e consulta. A consulta \u00e9 da informa\u00e7\u00e3o da temperatura m\u00e1xima e m\u00ednima da cidade de S\u00e3o Paulo no dia, para realiz\u00e1-la o usu\u00e1rio dever\u00e1 estar autenticado. O token para autentica\u00e7\u00e3o pode ser obtido na requisi\u00e7\u00e3o de cadastro ou login. </p>"},{"location":"#publicacao-no-docker-hub","title":"Publica\u00e7\u00e3o no Docker Hub","text":"<p>Foi feita a publica\u00e7\u00e3o da imagem da API no docker hub. Dessa forma, a aplica\u00e7\u00e3o pode ser executada por meio do comando <code>docker compose up</code>. Os passos utilizados est\u00e3o descritos na sess\u00e3o.</p>"},{"location":"#disponibilizacao-na-aws","title":"Disponibiliza\u00e7\u00e3o na AWS","text":"<p>A aplica\u00e7\u00e3o foi publicada na AWS e est\u00e1 dispon\u00edvel em : <code>http://a2bba3ecd5f6445868ac3407a8fdc70d-132096921.us-east-1.elb.amazonaws.com</code>. Os endpoints tamb\u00e9m podem ser testados por meio da interface do FastAPI. Os passos utilizados est\u00e3o descritos na sess\u00e3o.</p>"},{"location":"aws/","title":"Publica\u00e7\u00e3o na AWS","text":"<p>Para disponibilizar a API publicamente, foi feita a publica\u00e7\u00e3o da aplica\u00e7\u00e3o na AWS. Isso foi feito com a cria\u00e7\u00e3o de dois nodes, um para a API e um para o Postgres e atribuindo um ip p\u00fablico para a API. O ip publico obtido pode ser usado para realizar as requisi\u00e7\u00f5es usando os endpoints implementados.</p> <p>O c\u00f3digo e os arquivos usados no porjeto podem ser encontrados nesse reposit\u00f3rio.</p>"},{"location":"aws/#passo-a-passo","title":"Passo a passo:","text":""},{"location":"aws/#roles","title":"Roles:","text":"<p>Para gerenciar as permiss\u00f5es do cluster e do node group, foram criados 2 roles pelo Identity and Access Management (IAM).</p> <ul> <li>EKSClusterRole</li> </ul> <p>Use case: EKS-Cluster Permission Policies: AmazonEKSClusterPolicy</p> <ul> <li>EKSWorkerRoleCloud</li> </ul> <p>Use case: EC2 Permission Policies: AmazonEKS_CNI_Policy, AmazonEKSWorkerNodePolicy, AmazonEC2ContainerRegistryReadOnly</p>"},{"location":"aws/#criacao-da-network","title":"Cria\u00e7\u00e3o da network:","text":"<p>Foi criado um novo stack chamado eks-network-cloud na CloudFormation, para isso, foi utilizado um arquivo template que cria uma VPC com um par de redes publicas e um par de redes privadas devidamente conectadas. O arquivo utilizado, aws-cloudformation-template.yaml, est\u00e1 dispon\u00edvel no t\u00f3pico Arquivos no final da p\u00e1gina, e tamb\u00e9m \u00e9 disponibilizado pela aws em um guia para desenvolvedores nesse link.</p>"},{"location":"aws/#criacao-do-cluster","title":"Cria\u00e7\u00e3o do cluster","text":"<p>Utilizando o Elastic Kubernets Service, foi adicionado um novo cluster com acesso p\u00fablico e privado chamado eks-cluster-cloud. Foi atribu\u00eddo a ele o EKSClusterRole previamente criado e foram mantidos os add-ons sugeridos na cria\u00e7\u00e3o (CoreDNS, Amazon VPC CNI, kube-proxy e Amazon EKS Pod Identity Agent).</p>"},{"location":"aws/#node-group","title":"Node group","text":"<p>Na aba Compute do cluster eks-cluster-cloud foi adicionado um node group on-demand com 2 m\u00e1quinas de tamanho m\u00e9dio. As m\u00e1quinas foram criadas nas subnets privadas.</p>"},{"location":"aws/#deploy-da-aplicacao","title":"Deploy da aplica\u00e7\u00e3o","text":"<p>Para fazer o deploy da aplica\u00e7\u00e3o pelo aws cli, primeiramente foi necess\u00e1rio configurar a conta usando o comando:</p> <p><code>aws configure</code></p> <p>As informa\u00e7\u00f5es utilizadas foram obtidas criando uma Access Key na aba do usu\u00e1rio. Ap\u00f3s isso foi utilizado o comando:</p> <p><code>aws eks update-kubeconfig --name eks-cluster-cloud</code></p> <p>Para publicar a aplica\u00e7\u00e3o foram utilizados os comandos abaixo no diret\u00f3rio onde os arquivos estavam salvos:</p> <p><code>kubectl apply -f ./postgres.yaml</code></p> <p><code>kubectl apply -f ./api.yaml</code></p> <p>Os arquivos utilizados postgres.yaml e api.yaml est\u00e3o no t\u00f3pico abaixo.</p>"},{"location":"aws/#arquivos","title":"Arquivos","text":"api.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api\n  labels:\n    app: api\nspec:\n  selector:\n    matchLabels:\n      app: api\n  template:\n    metadata:\n      labels:\n        app: api\n    spec:\n      containers:\n        - name: api\n          image: beatrizrodriguesf/api-image:latest\n          ports:\n            - containerPort: 8000\n          env:\n            - name: POSTGRES_DB\n              value: \"projeto\"\n            - name: POSTGRES_USER\n              value: \"projeto\"\n            - name: POSTGRES_PASSWORD\n              value: \"projeto\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api\nspec:\n  selector:\n    app: api\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8000\n  type: LoadBalancer\n</code></pre> postgres.yaml<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: db\n  labels:\n    app: db\nspec:\n  selector:\n    matchLabels:\n      app: db\n  template:\n    metadata:\n      labels:\n        app: db\n    spec:\n      containers:\n        - name: postgres\n          image: postgres:17\n          ports:\n            - containerPort: 5432\n          env:\n            - name: POSTGRES_DB\n              value: \"projeto\"\n            - name: POSTGRES_USER\n              value: \"projeto\"\n            - name: POSTGRES_PASSWORD\n              value: \"projeto\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: db\nspec:\n  selector:\n    app: db\n  ports:\n    - protocol: TCP\n      port: 5432\n      targetPort: 5432\n  type: ClusterIP\n</code></pre> aws-cloudformation-template<pre><code>Description:  This template deploys a VPC, with a pair of public and private subnets spread\n  across two Availability Zones. It deploys an internet gateway, with a default\n  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),\n  and default routes for them in the private subnets.\n\nParameters:\n  EnvironmentName:\n    Description: An environment name that is prefixed to resource names\n    Type: String\n\n  VpcCIDR:\n    Description: Please enter the IP range (CIDR notation) for this VPC\n    Type: String\n    Default: 10.192.0.0/16\n\n  PublicSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone\n    Type: String\n    Default: 10.192.10.0/24\n\n  PublicSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone\n    Type: String\n    Default: 10.192.11.0/24\n\n  PrivateSubnet1CIDR:\n    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone\n    Type: String\n    Default: 10.192.20.0/24\n\n  PrivateSubnet2CIDR:\n    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone\n    Type: String\n    Default: 10.192.21.0/24\n\nResources:\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: !Ref VpcCIDR\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      Tags:\n        - Key: Name\n          Value: !Ref EnvironmentName\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: !Ref EnvironmentName\n\n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n\n  PublicSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 0, !GetAZs '' ]\n      CidrBlock: !Ref PublicSubnet1CIDR\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)\n\n  PublicSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 1, !GetAZs  '' ]\n      CidrBlock: !Ref PublicSubnet2CIDR\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)\n\n  PrivateSubnet1:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 0, !GetAZs  '' ]\n      CidrBlock: !Ref PrivateSubnet1CIDR\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)\n\n  PrivateSubnet2:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref VPC\n      AvailabilityZone: !Select [ 1, !GetAZs  '' ]\n      CidrBlock: !Ref PrivateSubnet2CIDR\n      MapPublicIpOnLaunch: false\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)\n\n  NatGateway1EIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n\n  NatGateway2EIP:\n    Type: AWS::EC2::EIP\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      Domain: vpc\n\n  NatGateway1:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGateway1EIP.AllocationId\n      SubnetId: !Ref PublicSubnet1\n\n  NatGateway2:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGateway2EIP.AllocationId\n      SubnetId: !Ref PublicSubnet2\n\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Public Routes\n\n  DefaultPublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: InternetGatewayAttachment\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n\n  PublicSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet1\n\n  PublicSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet2\n\n\n  PrivateRouteTable1:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Routes (AZ1)\n\n  DefaultPrivateRoute1:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway1\n\n  PrivateSubnet1RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable1\n      SubnetId: !Ref PrivateSubnet1\n\n  PrivateRouteTable2:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref VPC\n      Tags:\n        - Key: Name\n          Value: !Sub ${EnvironmentName} Private Routes (AZ2)\n\n  DefaultPrivateRoute2:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable2\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGateway2\n\n  PrivateSubnet2RouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTable2\n      SubnetId: !Ref PrivateSubnet2\n\n  NoIngressSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupName: \"no-ingress-sg\"\n      GroupDescription: \"Security group with no ingress rule\"\n      VpcId: !Ref VPC\n\nOutputs:\n  VPC:\n    Description: A reference to the created VPC\n    Value: !Ref VPC\n\n  PublicSubnets:\n    Description: A list of the public subnets\n    Value: !Join [ \",\", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]\n\n  PrivateSubnets:\n    Description: A list of the private subnets\n    Value: !Join [ \",\", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]\n\n  PublicSubnet1:\n    Description: A reference to the public subnet in the 1st Availability Zone\n    Value: !Ref PublicSubnet1\n\n  PublicSubnet2:\n    Description: A reference to the public subnet in the 2nd Availability Zone\n    Value: !Ref PublicSubnet2\n\n  PrivateSubnet1:\n    Description: A reference to the private subnet in the 1st Availability Zone\n    Value: !Ref PrivateSubnet1\n\n  PrivateSubnet2:\n    Description: A reference to the private subnet in the 2nd Availability Zone\n    Value: !Ref PrivateSubnet2\n\n  NoIngressSecurityGroup:\n    Description: Security group with no ingress rule\n    Value: !Ref NoIngressSecurityGroup\n</code></pre>"}]}